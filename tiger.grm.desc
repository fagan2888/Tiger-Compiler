
state 0:

	program : . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	program	goto 146
	exp	goto 9
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 1:

	exp : letstm .  (reduce by rule 13)



	.	reduce by rule 13


state 2:

	exp : loop .  (reduce by rule 11)



	.	reduce by rule 11


state 3:

	exp : ifstm .  (reduce by rule 10)



	.	reduce by rule 10


state 4:

	exp : recordcreate .  (reduce by rule 7)



	.	reduce by rule 7


state 5:

	exp : arraycreate .  (reduce by rule 14)



	.	reduce by rule 14


state 6:

	exp : operation .  (reduce by rule 6)



	.	reduce by rule 6


state 7:

	exp : funcall .  (reduce by rule 5)



	.	reduce by rule 5


state 8:

	exp : lvalue .  (reduce by rule 1)
	exp : lvalue . ASSIGN exp 
	lvalue : lvalue . DOT ID 
	lvalue : lvalue . LBRACK exp RBRACK 

	LBRACK	shift 23
	DOT	shift 22
	ASSIGN	shift 21


	.	reduce by rule 1


state 9:

	program : exp .  (reduce by rule 0)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 0


state 10:

	letstm : LET . decs IN expseq END 


	decs	goto 36

	.	reduce by rule 51


state 11:

	loop : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 37


	.	error


state 12:

	loop : WHILE . exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 38
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 13:

	ifstm : IF . exp THEN exp 
	ifstm : IF . exp THEN exp ELSE exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 39
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 14:

	exp : NIL .  (reduce by rule 2)



	.	reduce by rule 2


state 15:

	exp : BREAK .  (reduce by rule 12)



	.	reduce by rule 12


state 16:

	operation : MINUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 40
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 17:

	exp : LPAREN . expseq RPAREN 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 42
	lvalue	goto 8
	expseq	goto 41
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	reduce by rule 38


state 18:

	exp : STRING .  (reduce by rule 4)



	.	reduce by rule 4


state 19:

	exp : INT .  (reduce by rule 3)



	.	reduce by rule 3


state 20:

	lvalue : ID .  (reduce by rule 15)
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . LPAREN funinputs RPAREN 
	funcall : ID . LPAREN RPAREN 
	arraycreate : ID . LBRACK exp RBRACK OF exp 
	recordcreate : ID . LBRACE recordinputs RBRACE 
	recordcreate : ID . LBRACE RBRACE 

	LPAREN	shift 45
	LBRACK	shift 44
	LBRACE	shift 43


	.	reduce by rule 15


state 21:

	exp : lvalue ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 46
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 22:

	lvalue : lvalue DOT . ID 

	ID	shift 47


	.	error


state 23:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 48
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 24:

	operation : exp OR . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 49
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 25:

	operation : exp AND . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 50
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 26:

	operation : exp GE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 51
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 27:

	operation : exp GT . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 52
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 28:

	operation : exp LE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 53
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 29:

	operation : exp LT . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 54
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 30:

	operation : exp NEQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 55
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 31:

	operation : exp EQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 56
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 32:

	operation : exp DIVIDE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 57
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 33:

	operation : exp TIMES . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 58
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 34:

	operation : exp MINUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 59
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 35:

	operation : exp PLUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 60
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 36:

	decs : decs . dec 
	letstm : LET decs . IN expseq END 

	FUNCTION	shift 68
	VAR	shift 67
	TYPE	shift 66
	IN	shift 65

	dec	goto 64
	tydec	goto 63
	vardec	goto 62
	fundec	goto 61

	.	error


state 37:

	loop : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 69


	.	error


state 38:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	loop : WHILE exp . DO exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	DO	shift 70


	.	error


state 39:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	ifstm : IF exp . THEN exp 
	ifstm : IF exp . THEN exp ELSE exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	THEN	shift 71


	.	error


state 40:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : MINUS exp .  (reduce by rule 27)
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 



	.	reduce by rule 27


state 41:

	exp : LPAREN expseq . RPAREN 

	RPAREN	shift 72


	.	error


state 42:

	expseq : exp . expseq2 
	expseq : exp .  (reduce by rule 37)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	SEMICOLON	shift 74
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24

	expseq2	goto 73

	.	reduce by rule 37


state 43:

	recordcreate : ID LBRACE . recordinputs RBRACE 
	recordcreate : ID LBRACE . RBRACE 

	ID	shift 77
	RBRACE	shift 76

	recordinputs	goto 75

	.	error


state 44:

	lvalue : ID LBRACK . exp RBRACK 
	arraycreate : ID LBRACK . exp RBRACK OF exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 78
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 45:

	funcall : ID LPAREN . funinputs RPAREN 
	funcall : ID LPAREN . RPAREN 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	RPAREN	shift 81
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 80
	lvalue	goto 8
	funcall	goto 7
	funinputs	goto 79
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 46:

	exp : lvalue ASSIGN exp .  (reduce by rule 9)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 9
	COMMA	reduce by rule 9
	SEMICOLON	reduce by rule 9
	RPAREN	reduce by rule 9
	RBRACK	reduce by rule 9
	RBRACE	reduce by rule 9
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	reduce by rule 9
	VAR	reduce by rule 9
	TYPE	reduce by rule 9
	THEN	reduce by rule 9
	ELSE	reduce by rule 9
	TO	reduce by rule 9
	DO	reduce by rule 9
	IN	reduce by rule 9
	END	reduce by rule 9


	.	error


state 47:

	lvalue : lvalue DOT ID .  (reduce by rule 16)



	.	reduce by rule 16


state 48:

	lvalue : lvalue LBRACK exp . RBRACK 
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	RBRACK	shift 82
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	error


state 49:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp OR exp .  (reduce by rule 34)
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25


	.	reduce by rule 34


state 50:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	operation : exp AND exp .  (reduce by rule 35)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26


	.	reduce by rule 35


state 51:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp GE exp .  (reduce by rule 28)
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 28
	COMMA	reduce by rule 28
	SEMICOLON	reduce by rule 28
	RPAREN	reduce by rule 28
	RBRACK	reduce by rule 28
	RBRACE	reduce by rule 28
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 28
	AND	reduce by rule 28
	OR	reduce by rule 28
	FUNCTION	reduce by rule 28
	VAR	reduce by rule 28
	TYPE	reduce by rule 28
	THEN	reduce by rule 28
	ELSE	reduce by rule 28
	TO	reduce by rule 28
	DO	reduce by rule 28
	IN	reduce by rule 28
	END	reduce by rule 28


	.	error


state 52:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp GT exp .  (reduce by rule 29)
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 29
	COMMA	reduce by rule 29
	SEMICOLON	reduce by rule 29
	RPAREN	reduce by rule 29
	RBRACK	reduce by rule 29
	RBRACE	reduce by rule 29
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 29
	AND	reduce by rule 29
	OR	reduce by rule 29
	FUNCTION	reduce by rule 29
	VAR	reduce by rule 29
	TYPE	reduce by rule 29
	THEN	reduce by rule 29
	ELSE	reduce by rule 29
	TO	reduce by rule 29
	DO	reduce by rule 29
	IN	reduce by rule 29
	END	reduce by rule 29


	.	error


state 53:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp LE exp .  (reduce by rule 30)
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 30
	COMMA	reduce by rule 30
	SEMICOLON	reduce by rule 30
	RPAREN	reduce by rule 30
	RBRACK	reduce by rule 30
	RBRACE	reduce by rule 30
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 30
	AND	reduce by rule 30
	OR	reduce by rule 30
	FUNCTION	reduce by rule 30
	VAR	reduce by rule 30
	TYPE	reduce by rule 30
	THEN	reduce by rule 30
	ELSE	reduce by rule 30
	TO	reduce by rule 30
	DO	reduce by rule 30
	IN	reduce by rule 30
	END	reduce by rule 30


	.	error


state 54:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp LT exp .  (reduce by rule 31)
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 31
	COMMA	reduce by rule 31
	SEMICOLON	reduce by rule 31
	RPAREN	reduce by rule 31
	RBRACK	reduce by rule 31
	RBRACE	reduce by rule 31
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 31
	AND	reduce by rule 31
	OR	reduce by rule 31
	FUNCTION	reduce by rule 31
	VAR	reduce by rule 31
	TYPE	reduce by rule 31
	THEN	reduce by rule 31
	ELSE	reduce by rule 31
	TO	reduce by rule 31
	DO	reduce by rule 31
	IN	reduce by rule 31
	END	reduce by rule 31


	.	error


state 55:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp NEQ exp .  (reduce by rule 32)
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 32
	COMMA	reduce by rule 32
	SEMICOLON	reduce by rule 32
	RPAREN	reduce by rule 32
	RBRACK	reduce by rule 32
	RBRACE	reduce by rule 32
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 32
	AND	reduce by rule 32
	OR	reduce by rule 32
	FUNCTION	reduce by rule 32
	VAR	reduce by rule 32
	TYPE	reduce by rule 32
	THEN	reduce by rule 32
	ELSE	reduce by rule 32
	TO	reduce by rule 32
	DO	reduce by rule 32
	IN	reduce by rule 32
	END	reduce by rule 32


	.	error


state 56:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp EQ exp .  (reduce by rule 33)
	operation : exp . OR exp 
	operation : exp . AND exp 

	EOF	reduce by rule 33
	COMMA	reduce by rule 33
	SEMICOLON	reduce by rule 33
	RPAREN	reduce by rule 33
	RBRACK	reduce by rule 33
	RBRACE	reduce by rule 33
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	reduce by rule 33
	AND	reduce by rule 33
	OR	reduce by rule 33
	FUNCTION	reduce by rule 33
	VAR	reduce by rule 33
	TYPE	reduce by rule 33
	THEN	reduce by rule 33
	ELSE	reduce by rule 33
	TO	reduce by rule 33
	DO	reduce by rule 33
	IN	reduce by rule 33
	END	reduce by rule 33


	.	error


state 57:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp DIVIDE exp .  (reduce by rule 26)
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 



	.	reduce by rule 26


state 58:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp TIMES exp .  (reduce by rule 25)
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 



	.	reduce by rule 25


state 59:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp MINUS exp .  (reduce by rule 24)
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	TIMES	shift 33
	DIVIDE	shift 32


	.	reduce by rule 24


state 60:

	operation : exp . PLUS exp 
	operation : exp PLUS exp .  (reduce by rule 23)
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	TIMES	shift 33
	DIVIDE	shift 32


	.	reduce by rule 23


state 61:

	dec : fundec .  (reduce by rule 54)



	.	reduce by rule 54


state 62:

	dec : vardec .  (reduce by rule 53)



	.	reduce by rule 53


state 63:

	dec : tydec .  (reduce by rule 52)



	.	reduce by rule 52


state 64:

	decs : decs dec .  (reduce by rule 50)



	.	reduce by rule 50


state 65:

	letstm : LET decs IN . expseq END 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 42
	lvalue	goto 8
	expseq	goto 83
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	reduce by rule 38


state 66:

	tydec : TYPE . ID EQ ty 
	tydec : TYPE . ID EQ ty tydec 

	ID	shift 84


	.	error


state 67:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 85


	.	error


state 68:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp fundec 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp fundec 

	ID	shift 86


	.	error


state 69:

	loop : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 87
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 70:

	loop : WHILE exp DO . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 88
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 71:

	ifstm : IF exp THEN . exp 
	ifstm : IF exp THEN . exp ELSE exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 89
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 72:

	exp : LPAREN expseq RPAREN .  (reduce by rule 8)



	.	reduce by rule 8


state 73:

	expseq : exp expseq2 .  (reduce by rule 36)



	.	reduce by rule 36


state 74:

	expseq2 : SEMICOLON . exp 
	expseq2 : SEMICOLON . exp expseq2 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 90
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 75:

	recordcreate : ID LBRACE recordinputs . RBRACE 

	RBRACE	shift 91


	.	error


state 76:

	recordcreate : ID LBRACE RBRACE .  (reduce by rule 42)



	.	reduce by rule 42


state 77:

	recordinputs : ID . EQ exp 
	recordinputs : ID . EQ exp COMMA recordinputs 

	EQ	shift 92


	.	error


state 78:

	lvalue : ID LBRACK exp . RBRACK 
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	arraycreate : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 93
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	error


state 79:

	funcall : ID LPAREN funinputs . RPAREN 

	RPAREN	shift 94


	.	error


state 80:

	funinputs : exp . COMMA funinputs 
	funinputs : exp .  (reduce by rule 22)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	COMMA	shift 95
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 22


state 81:

	funcall : ID LPAREN RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 82:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 17)



	.	reduce by rule 17


state 83:

	letstm : LET decs IN expseq . END 

	END	shift 96


	.	error


state 84:

	tydec : TYPE ID . EQ ty 
	tydec : TYPE ID . EQ ty tydec 

	EQ	shift 97


	.	error


state 85:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 99
	ASSIGN	shift 98


	.	error


state 86:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp fundec 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp fundec 

	LPAREN	shift 100


	.	error


state 87:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	loop : FOR ID ASSIGN exp . TO exp DO exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	TO	shift 101


	.	error


state 88:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	loop : WHILE exp DO exp .  (reduce by rule 47)

	EOF	reduce by rule 47
	COMMA	reduce by rule 47
	SEMICOLON	reduce by rule 47
	RPAREN	reduce by rule 47
	RBRACK	reduce by rule 47
	RBRACE	reduce by rule 47
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	reduce by rule 47
	VAR	reduce by rule 47
	TYPE	reduce by rule 47
	THEN	reduce by rule 47
	ELSE	reduce by rule 47
	TO	reduce by rule 47
	DO	reduce by rule 47
	IN	reduce by rule 47
	END	reduce by rule 47


	.	error


state 89:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	ifstm : IF exp THEN exp .  (reduce by rule 45)
	ifstm : IF exp THEN exp . ELSE exp 

	EOF	reduce by rule 45
	COMMA	reduce by rule 45
	SEMICOLON	reduce by rule 45
	RPAREN	reduce by rule 45
	RBRACK	reduce by rule 45
	RBRACE	reduce by rule 45
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	reduce by rule 45
	VAR	reduce by rule 45
	TYPE	reduce by rule 45
	THEN	reduce by rule 45
	ELSE	shift 102
	TO	reduce by rule 45
	DO	reduce by rule 45
	IN	reduce by rule 45
	END	reduce by rule 45


	.	error


state 90:

	expseq2 : SEMICOLON exp .  (reduce by rule 39)
	expseq2 : SEMICOLON exp . expseq2 
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	SEMICOLON	shift 74
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24

	expseq2	goto 103

	.	reduce by rule 39


state 91:

	recordcreate : ID LBRACE recordinputs RBRACE .  (reduce by rule 41)



	.	reduce by rule 41


state 92:

	recordinputs : ID EQ . exp 
	recordinputs : ID EQ . exp COMMA recordinputs 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 104
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 93:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 18)
	arraycreate : ID LBRACK exp RBRACK . OF exp 

	OF	shift 105


	.	reduce by rule 18


state 94:

	funcall : ID LPAREN funinputs RPAREN .  (reduce by rule 19)



	.	reduce by rule 19


state 95:

	funinputs : exp COMMA . funinputs 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 80
	lvalue	goto 8
	funcall	goto 7
	funinputs	goto 106
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 96:

	letstm : LET decs IN expseq END .  (reduce by rule 49)



	.	reduce by rule 49


state 97:

	tydec : TYPE ID EQ . ty 
	tydec : TYPE ID EQ . ty tydec 

	ID	shift 110
	LBRACE	shift 109
	ARRAY	shift 108

	ty	goto 107

	.	error


state 98:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 111
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 99:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 112


	.	error


state 100:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp fundec 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp fundec 

	ID	shift 114

	tyfields	goto 113

	.	reduce by rule 60


state 101:

	loop : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 115
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 102:

	ifstm : IF exp THEN exp ELSE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 116
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 103:

	expseq2 : SEMICOLON exp expseq2 .  (reduce by rule 40)



	.	reduce by rule 40


state 104:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	recordinputs : ID EQ exp .  (reduce by rule 43)
	recordinputs : ID EQ exp . COMMA recordinputs 

	COMMA	shift 117
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 43


state 105:

	arraycreate : ID LBRACK exp RBRACK OF . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 118
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 106:

	funinputs : exp COMMA funinputs .  (reduce by rule 21)



	.	reduce by rule 21


state 107:

	tydec : TYPE ID EQ ty .  (reduce by rule 55)
	tydec : TYPE ID EQ ty . tydec 

	TYPE	shift 66

	tydec	goto 119

	.	reduce by rule 55


state 108:

	ty : ARRAY . OF ID 

	OF	shift 120


	.	error


state 109:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 114

	tyfields	goto 121

	.	reduce by rule 60


state 110:

	ty : ID .  (reduce by rule 57)



	.	reduce by rule 57


state 111:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 65)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 65


state 112:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 122


	.	error


state 113:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp fundec 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp fundec 

	RPAREN	shift 123


	.	error


state 114:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID tyfields2 

	COLON	shift 124


	.	error


state 115:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	loop : FOR ID ASSIGN exp TO exp . DO exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	DO	shift 125


	.	error


state 116:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	ifstm : IF exp THEN exp ELSE exp .  (reduce by rule 46)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 46


state 117:

	recordinputs : ID EQ exp COMMA . recordinputs 

	ID	shift 77

	recordinputs	goto 126

	.	error


state 118:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	arraycreate : ID LBRACK exp RBRACK OF exp .  (reduce by rule 71)

	EOF	reduce by rule 71
	COMMA	reduce by rule 71
	SEMICOLON	reduce by rule 71
	RPAREN	reduce by rule 71
	RBRACK	reduce by rule 71
	RBRACE	reduce by rule 71
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	reduce by rule 71
	VAR	reduce by rule 71
	TYPE	reduce by rule 71
	THEN	reduce by rule 71
	ELSE	reduce by rule 71
	TO	reduce by rule 71
	DO	reduce by rule 71
	IN	reduce by rule 71
	END	reduce by rule 71


	.	error


state 119:

	tydec : TYPE ID EQ ty tydec .  (reduce by rule 56)



	.	reduce by rule 56


state 120:

	ty : ARRAY OF . ID 

	ID	shift 127


	.	error


state 121:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 128


	.	error


state 122:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 129
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 123:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp fundec 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp fundec 

	COLON	shift 131
	EQ	shift 130


	.	error


state 124:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID tyfields2 

	ID	shift 132


	.	error


state 125:

	loop : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 133
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 126:

	recordinputs : ID EQ exp COMMA recordinputs .  (reduce by rule 44)



	.	reduce by rule 44


state 127:

	ty : ARRAY OF ID .  (reduce by rule 59)



	.	reduce by rule 59


state 128:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 58)



	.	reduce by rule 58


state 129:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 66)
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 66


state 130:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp fundec 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 134
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp fundec 

	ID	shift 135


	.	error


state 132:

	tyfields : ID COLON ID .  (reduce by rule 61)
	tyfields : ID COLON ID . tyfields2 

	COMMA	shift 137

	tyfields2	goto 136

	.	reduce by rule 61


state 133:

	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 
	loop : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 48)

	EOF	reduce by rule 48
	COMMA	reduce by rule 48
	SEMICOLON	reduce by rule 48
	RPAREN	reduce by rule 48
	RBRACK	reduce by rule 48
	RBRACE	reduce by rule 48
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	reduce by rule 48
	VAR	reduce by rule 48
	TYPE	reduce by rule 48
	THEN	reduce by rule 48
	ELSE	reduce by rule 48
	TO	reduce by rule 48
	DO	reduce by rule 48
	IN	reduce by rule 48
	END	reduce by rule 48


	.	error


state 134:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 67)
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp . fundec 
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	shift 68

	fundec	goto 138

	.	reduce by rule 67


state 135:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp fundec 

	EQ	shift 139


	.	error


state 136:

	tyfields : ID COLON ID tyfields2 .  (reduce by rule 62)



	.	reduce by rule 62


state 137:

	tyfields2 : COMMA . ID COLON ID 
	tyfields2 : COMMA . ID COLON ID tyfields2 

	ID	shift 140


	.	error


state 138:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec .  (reduce by rule 69)



	.	reduce by rule 69


state 139:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp fundec 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	BREAK	shift 15
	NIL	shift 14
	IF	shift 13
	WHILE	shift 12
	FOR	shift 11
	LET	shift 10

	exp	goto 141
	lvalue	goto 8
	funcall	goto 7
	operation	goto 6
	arraycreate	goto 5
	recordcreate	goto 4
	ifstm	goto 3
	loop	goto 2
	letstm	goto 1

	.	error


state 140:

	tyfields2 : COMMA ID . COLON ID 
	tyfields2 : COMMA ID . COLON ID tyfields2 

	COLON	shift 142


	.	error


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 68)
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp . fundec 
	operation : exp . PLUS exp 
	operation : exp . MINUS exp 
	operation : exp . TIMES exp 
	operation : exp . DIVIDE exp 
	operation : exp . GE exp 
	operation : exp . GT exp 
	operation : exp . LE exp 
	operation : exp . LT exp 
	operation : exp . NEQ exp 
	operation : exp . EQ exp 
	operation : exp . OR exp 
	operation : exp . AND exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	FUNCTION	shift 68

	fundec	goto 143

	.	reduce by rule 68


state 142:

	tyfields2 : COMMA ID COLON . ID 
	tyfields2 : COMMA ID COLON . ID tyfields2 

	ID	shift 144


	.	error


state 143:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec .  (reduce by rule 70)



	.	reduce by rule 70


state 144:

	tyfields2 : COMMA ID COLON ID .  (reduce by rule 63)
	tyfields2 : COMMA ID COLON ID . tyfields2 

	COMMA	shift 137

	tyfields2	goto 145

	.	reduce by rule 63


state 145:

	tyfields2 : COMMA ID COLON ID tyfields2 .  (reduce by rule 64)



	.	reduce by rule 64


state 146:


	EOF	accept


	.	error

574 of 1085 action table entries left after compaction
346 goto table entries
