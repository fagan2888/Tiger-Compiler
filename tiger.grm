%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm
    program
	| decs | dec | tydec | vardec | fundec
	| ty | tyfields | tyfields2
	| exp | lvalue | expseq | expseq2
	| funcall | funinputs | funinputs2
  | arraycreate | recordcreate | recordinputs | recordinputs2
	| ifthen | ifthenelse | whilestm | forstm | letstm


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program : exp ()
        | decs ()

decs : decs dec ()
     | ()

dec : tydec ()
	  | vardec ()
	  | fundec ()

tydec : TYPE ID EQ ty ()

ty : ID ()
	 | LBRACE tyfields RBRACE ()
	 | ARRAY OF ID ()

tyfields : ()
				 | ID COLON ID ()
				 | ID COLON ID tyfields2 ()

tyfields2 : COMMA ID COLON ID ()
          | COMMA ID COLON ID tyfields2 ()

vardec : VAR ID ASSIGN exp ()
			 | VAR ID COLON ID ASSIGN exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
			 | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

exp : letstm ()
    | forstm ()
    | whilestm ()
    | ifthen ()
    | ifthenelse ()
    | fundec ()
    | funcall ()
    | vardec ()
    | tydec ()
    | INT ()
    | STRING ()
    | lvalue ()
    | lvalue ASSIGN exp ()
    | arraycreate ()
    | recordcreate ()
    | NIL ()
    | BREAK ()
    | exp PLUS exp ()
    | exp MINUS exp ()
    | exp TIMES exp ()
    | exp DIVIDE exp ()
    | MINUS exp %prec UMINUS ()
    | exp OR exp ()
    | exp AND exp ()
    | exp GE exp ()
    | exp GT exp ()
    | exp LE exp ()
    | exp LT exp ()
    | exp NEQ exp ()
    | exp EQ exp ()
    | LPAREN expseq RPAREN ()

lvalue : ID ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()

expseq : exp expseq2 ()
       | exp ()
       | ()

expseq2 : SEMICOLON exp ()
        | SEMICOLON exp expseq2 ()

funcall : ID LPAREN funinputs RPAREN ()

funinputs : exp funinputs2 ()
          | exp ()
          | ()

funinputs2 : COMMA exp ()
           | COMMA exp funinputs2 ()

arraycreate : ID LBRACK exp RBRACK OF exp  ()

recordcreate : ID LBRACE recordinputs RBRACE ()

recordinputs : ID EQ exp recordinputs2 ()
             | ID EQ exp ()
             | ()

recordinputs2 : COMMA ID EQ exp ()
              | COMMA ID EQ exp recordinputs2 ()

ifthenelse : IF exp THEN exp ELSE exp ()

ifthen : IF exp THEN exp ()

whilestm : WHILE exp DO exp ()

forstm : FOR ID ASSIGN exp TO exp DO exp ()

letstm : LET decs IN expseq END ()

(* TODO
 * merge.tig : line 9 thinks doing variable declaration but we want a function call
 * queens.tig : think we are doing array creation but we want lvalue = exp
 * Thoughts :
 *)
