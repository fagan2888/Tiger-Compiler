%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm
    program
	| decs | dec | tydec | vardec | fundec
	| ty | tyfields
	| exp | exps | lvalue | expseq
	| funccall
	| ifthen | ifthenelse | whilestm | forstm | letstm
		

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

decs : decs dec () (* Maybe *)

dec : tydec ()
	  | vardec ()
	  | fundec ()
						

tydec : TYPE ID ASSIGN ty ()

ty : ID ()
	 | LBRACE tyfields RBRACE ()
	 | ARRAY OF ID ()

tyfields : ()
				 | ID COLON ID () 
				 | ID COLON ID COMMA tyfields () (* Maybe *)

							
vardec : VAR ID COLON ASSIGN exp ()
			 | VAR ID COLON ID COLON ASSIGN exp ()
						 
						
fundec : FUNCTION ID LPAREN tyfields RPAREN ASSIGN exp ()
			 | FUNCTION ID LPAREN tyfields RPAREN COLON ID ASSIGN exp ()

									
exps : exp exp ()

exp : ()

lvalue : ()

expseq : ()

funccall : ()

								(* Arithmetic and Comparison Exps*)

ifthenelse : IF exp THEN exp ELSE exp ()

ifthen : IF exp THEN exp ()

whilestm : WHILE exp DO exp ()

forstm : FOR ID COLON ASSIGN exp TO exp DO exp ()

letstm : LET decs IN exp END () (* Maybe *)
					
