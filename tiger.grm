structure A = Absyn
val S = Symbol.symbol

%%
%term
    EOF
  | ID of string | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | EQUALS
  | AND | OR | ASSIGN | FUNCTION | VAR | TYPE | BREAK | NIL
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF

%nonterm
    program of A.exp
	| decs of A.dec list
  | dec of A.dec
  | tydec of {name: A.symbol, ty: A.ty, pos: A.pos} list
  | vardec of A.dec
  | fundec of A.fundec list
	| ty of A.ty
  | tyfields of A.field list
  | tyfields2 of A.field list
	| exp of A.exp
  | lvalue of A.var
  | expseq of A.exp
  | expseq2 of (A.exp * A.pos) list
	| funcall of A.exp
  | funinputs of A.exp list
  | operation of A.exp
  | arraycreate of A.exp
  | recordcreate of A.exp
  | recordinputs of (A.symbol * A.exp * A.pos) list
	| ifstm of A.exp
  | loop of A.exp
  | letstm of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ID
%nonassoc OF ASSIGN DO
%nonassoc THEN
%nonassoc ELSE
%nonassoc LBRACK
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

program : exp (exp)

exp : lvalue (A.VarExp(lvalue))
    | NIL (A.NilExp)
    | INT (A.IntExp(INT))
    | STRING (A.StringExp(STRING,STRINGleft))
    | funcall (funcall)
    | operation (operation)
    | recordcreate (recordcreate)
    | LPAREN expseq RPAREN (expseq)
    | lvalue ASSIGN exp (A.AssignExp({var=lvalue,exp=exp,pos=lvalueleft}))
    | ifstm (ifstm)
    | loop (loop)
    | BREAK (A.BreakExp(BREAKleft))
    | letstm (letstm)
    | arraycreate (arraycreate)

lvalue : ID (A.SimpleVar(S(ID),IDleft))
       | lvalue DOT ID (A.FieldVar(lvalue,S(ID),lvalueleft))
       | lvalue LBRACK exp RBRACK (A.SubscriptVar(lvalue,exp,lvalueleft))
       | ID LBRACK exp RBRACK (A.SubscriptVar(A.SimpleVar(S(ID),IDleft),exp,IDleft))

funcall : ID LPAREN funinputs RPAREN (A.CallExp({func=S(ID),args=funinputs,pos=IDleft}))
        | ID LPAREN RPAREN (A.CallExp({func=S(ID),args=[],pos=IDleft}))

funinputs : exp COMMA funinputs (exp::funinputs)
          | exp (exp::[])

operation : exp PLUS exp (A.OpExp({left=exp1,oper=A.PlusOp,right=exp2,pos=exp1left}))
          | exp MINUS exp (A.OpExp({left=exp1,oper=A.MinusOp,right=exp2,pos=exp1left}))
          | exp TIMES exp (A.OpExp({left=exp1,oper=A.TimesOp,right=exp2,pos=exp1left}))
          | exp DIVIDE exp (A.OpExp({left=exp1,oper=A.DivideOp,right=exp2,pos=exp1left}))
          | MINUS exp %prec UMINUS (A.OpExp({left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=MINUSleft}))
          | exp GE exp (A.OpExp({left=exp1,oper=A.GeOp,right=exp2,pos=exp1left}))
          | exp GT exp (A.OpExp({left=exp1,oper=A.GtOp,right=exp2,pos=exp1left}))
          | exp LE exp (A.OpExp({left=exp1,oper=A.LeOp,right=exp2,pos=exp1left}))
          | exp LT exp (A.OpExp({left=exp1,oper=A.LtOp,right=exp2,pos=exp1left}))
          | exp NEQ exp (A.OpExp({left=exp1,oper=A.NeqOp,right=exp2,pos=exp1left}))
          | exp EQ exp (A.OpExp({left=exp1,oper=A.EqOp,right=exp2,pos=exp1left}))
          | exp OR exp (A.IfExp({test=exp1,then'=A.IntExp(1),else'=SOME(exp2),pos=exp1left}))
          | exp AND exp (A.IfExp({test=exp1,then'=exp2,else'=SOME(A.IntExp(0)),pos=exp1left}))

expseq : exp expseq2 (A.SeqExp((exp,expleft)::expseq2))
       | exp (A.SeqExp([(exp,expleft)]))
       | (A.SeqExp([]))

expseq2 : SEMICOLON exp ((exp,expleft)::[])
        | SEMICOLON exp expseq2 ((exp,expleft)::expseq2)

recordcreate : ID LBRACE recordinputs RBRACE (A.RecordExp({fields=recordinputs,typ=S(ID),pos=IDleft}))
             | ID LBRACE RBRACE (A.RecordExp({fields=[],typ=S(ID),pos=IDleft}))

recordinputs : ID EQ exp ((S(ID),exp,IDleft)::[])
             | ID EQ exp COMMA recordinputs ((S(ID),exp,IDleft)::recordinputs)

ifstm : IF exp THEN exp (A.IfExp({test=exp1,then'=exp2,else'=NONE,pos=IFleft}))
      | IF exp THEN exp ELSE exp (A.IfExp({test=exp1,then'=exp2,else'=SOME(exp3),pos=IFleft}))

loop : WHILE exp DO exp (A.WhileExp({test=exp1,body=exp2,pos=WHILEleft}))
     | FOR ID ASSIGN exp TO exp DO exp (A.ForExp({var=S(ID),escape=ref true,lo=exp1,hi=exp2,body=exp3,pos=FORleft}))

letstm : LET decs IN expseq END (A.LetExp({decs=decs,body=expseq,pos=LETleft}))

decs : dec decs (dec::decs)
     | ([])

dec : tydec (A.TypeDec(tydec))
	  | vardec (vardec)
	  | fundec (A.FunctionDec(fundec))

tydec : TYPE ID EQ ty ({name=S(ID),ty=ty,pos=TYPEleft}::[])
      | TYPE ID EQ ty tydec ({name=S(ID),ty=ty,pos=TYPEleft}::tydec)

ty : ID (A.NameTy(S(ID), IDleft))
   | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
	 | ARRAY OF ID (A.ArrayTy(S(ID),ARRAYleft))

tyfields : ([])
   			 | ID COLON ID ({name=S(ID1),escape=ref true,typ=S(ID2),pos=ID1left}::[])
   			 | ID COLON ID tyfields2 ({name=S(ID1),escape=ref true,typ=S(ID2),pos=ID1left}::tyfields2)

tyfields2 : COMMA ID COLON ID ({name=S(ID1),escape=ref true,typ=S(ID2),pos=ID1left}::[])
          | COMMA ID COLON ID tyfields2 ({name=S(ID1),escape=ref true,typ=S(ID2),pos=ID1left}::tyfields2)

vardec : VAR ID ASSIGN exp (A.VarDec({name=S(ID),escape=ref true,typ=NONE,init=exp,pos=VARleft}))
       | VAR ID COLON ID ASSIGN exp (A.VarDec({name=S(ID1),escape=ref true,typ=SOME(S(ID2),ID2left),init=exp,pos=VARleft}))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=S(ID),params=tyfields,result=NONE,body=exp,pos=FUNCTIONleft}::[])
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=S(ID1),params=tyfields,result=SOME(S(ID2),ID2left),body=exp,pos=FUNCTIONleft}::[])
       | FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec ({name=S(ID),params=tyfields,result=NONE,body=exp,pos=FUNCTIONleft}::fundec)
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec ({name=S(ID1),params=tyfields,result=SOME(S(ID2),ID2left),body=exp,pos=FUNCTIONleft}::fundec)

arraycreate : ID LBRACK exp RBRACK OF exp  (A.ArrayExp({typ=S(ID),size=exp1,init=exp2,pos=IDleft}))
